import { animate, style, transition, trigger } from '@angular/animations';
import { Component, OnInit, ViewChild, AfterViewInit, ElementRef } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { DangerDetails } from 'src/app/model/DangerDetails';
import { DangerDetailsService } from '../../data-access/danger-details/danger-details.service';
import { KinneyIndexService } from 'src/app/shared/kinney-index/data-access/kinney-index.service';
import { jsPDF } from 'jspdf';
import * as Excel from 'exceljs';
import * as path from 'path';
import autoTable from 'jspdf-autotable';

@Component({
  selector: 'app-procena-rizika-pregled',
  templateUrl: './procena-rizika-pregled.component.html',
  styleUrls: ['./procena-rizika-pregled.component.css'],
  animations: [
    trigger('fadeInFromRight', [
      transition(':enter', [
        style({ transform: 'translateX(100%)', opacity: 0 }),
        animate('300ms ease-out', style({ transform: 'translateX(0)', opacity: 1 }))
      ])
    ])
  ]
})

export class ProcenaRizikaPregledComponent implements OnInit, AfterViewInit {
  dangerDetails: DangerDetails[] = [];
  dangerDetailsFiltered: DangerDetails[] = [];

  displayedColumns: string[] = ['code', 'descriptions', 'probability', 'effect', 'frequency', 'value'];
  dataSource = new MatTableDataSource(this.dangerDetails);
  show: boolean = true;

  target: string = "";
  found: boolean = false;
  data: string = "";
  dataFound: boolean = false;

  viewTable : boolean = true;
  showData: boolean = false;
  result: string = "";
  results: string[] = [];
 
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild('cellRef', {static: false}) cellRef: ElementRef;

  constructor(
    private dangerDetailsService: DangerDetailsService,
    private kinneyIndexService: KinneyIndexService
  ) {

  }

  ngOnInit(): void {
    this.getAllDangerDetails();
    
  }

  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    setTimeout(() => {
      const rows = document.querySelectorAll('.riskValue');
      
      rows.forEach(row => {
        const rowValue = Number(row.textContent);
        const result = this.kinneyIndexService.calculateRang(rowValue);
        this.results.push(result);
      });      
      
    }, 100);
    
  }

  getAllDangerDetails() {
    this.dangerDetailsService.getAllDangerDetails().subscribe(response => {
      this.dangerDetails = Object.values(response);
      this.dangerDetailsFiltered = Object.values(response);
      this.dataSource.data = this.dataSource.data.concat(this.dangerDetails.slice(0, 1000));
      this.paginator._changePageSize(this.paginator.pageSize);
  
    });
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  reset() {
    this.target = "";
    this.emptyTable();
    this.getAllDangerDetails();
  }

  emptyTable() {
    this.dataSource.data = [];
    this.paginator._changePageSize(this.paginator.pageSize);
  }

  isFound() {
    return this.found;
  }

  getViewTable(){
    return this.viewTable;
  }

  getShowData(){
    return this.showData;
  }

  goBack(){
    this.showData = false;
    this.viewTable = true;
  }

  generatePDF() {
    const doc = new jsPDF();
    const table = document.querySelector('.dangerDetailsTable');
    const rows = table.querySelectorAll('tr');
    const columns = ['Šifra opasnosti', 'Vrsta i opis opasnosti/štetnosti', 'Verovatnoća', 'Posledice', 'Učestalost', 'Rizik'];
          
    // An empty array to store the table data
    const data = [];
  
    // Loop through each row of the table
    for (let i = 1; i < rows.length; i++) {
      // Get all cells in the row
      const cells = rows[i].querySelectorAll('td');
  
      // An empty object to store the row data
      const rowData = {};
  
      // Loop through each cell in the row
      for (let j = 0; j < cells.length; j++) {
        // Get the value of the cell
        const cellValue = cells[j].innerText;
  
        // Add the value to the row data object
        rowData[columns[j]] = cellValue;
      }
  
      // Add the row data to the table data array
      data.push(rowData);
      
    }
      
    
    console.log("Kolone: ", columns);
    
    console.log("Podaci:" , data);
    

    // Add the table to the PDF document
    autoTable(doc, {
      head: [columns],
      body: data
    });

    // Download the PDF document as a file
    doc.save('Procena rizika.pdf');

  }

  generateExcel() {
    const workbook = new Excel.Workbook();
    const worksheet = workbook.addWorksheet('Procena rizika');

    const columns = [
      { key: 'sifraOpasnosti', header: 'Šifra opasnosti' },
      { key: 'vrstaOpis', header: 'Vrsta i opis opasnosti/štetnosti' },
      { key: 'verovatnoca', header: 'Verovatnoća' },
      { key: 'posledice', header: 'Posledice' },
      { key: 'ucestalost', header: 'Učestalost' },
      { key: 'rizik', header: 'Rizik' }
    ];

    worksheet.columns = columns;

    this.dangerDetailsService.getAllDangerDetails().subscribe(response => {
      const jsonString = JSON.stringify(response);
      const dataArray = JSON.parse(jsonString);
      
      dataArray.forEach(data => {
        worksheet.addRow(data);
      });

      const exportPath = path.resolve(__dirname, 'ProcenaRizika.xlsx');
      console.log(exportPath);

      setTimeout(() => {
        workbook.xlsx.writeFile(exportPath);
      }, 1000);
      
    });
    
  }

}